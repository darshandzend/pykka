import threading
from typing import Any, ClassVar, List, Type, overload

from typing_extensions import Literal  # Py38+: Available in ``typing``

from pykka import Actor, ActorRef, Future

class ActorRegistry:
    _actor_refs: ClassVar[List[ActorRef]]
    _actor_refs_lock: ClassVar[threading.RLock]
    @classmethod
    def broadcast(
        cls, message: Any, target_class: Type[Actor] | None = ...
    ) -> None: ...
    @classmethod
    def get_all(cls) -> List[ActorRef]: ...
    @classmethod
    def get_by_class(cls, actor_class: Type[Actor]) -> List[ActorRef]: ...
    @classmethod
    def get_by_class_name(cls, actor_class_name: str) -> List[ActorRef]: ...
    @classmethod
    def get_by_urn(cls, actor_urn: str) -> ActorRef | None: ...
    @classmethod
    def register(cls, actor_ref: ActorRef) -> None: ...
    @overload
    @classmethod
    def stop_all(
        cls, block: Literal[True], timeout: float | None = ...
    ) -> List[bool]: ...
    @overload  # noqa: Allow redefinition
    @classmethod
    def stop_all(
        cls, block: Literal[False], timeout: float | None = ...
    ) -> List[Future[bool]]: ...
    @overload  # noqa: Allow redefinition
    @classmethod
    def stop_all(
        cls, block: bool = ..., timeout: float | None = ...
    ) -> List[bool] | List[Future[bool]] | List[bool | Future[bool]]: ...
    @classmethod
    def unregister(cls, actor_ref: ActorRef) -> None: ...
